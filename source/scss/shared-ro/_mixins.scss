// 'Conditional' Media Queries:

// $fix-viewport          :  the value to use as the viewport in the desired mediaquery

// respond-min( $width )  :  Outputs a mediaquery with 'min-width' property.
// respond-max( $width )  :  Outputs a mediaquery with 'max-width' property.
// respond-to( $windowtype )  :  Outputs a mediaquery with 'min-width' property based on small-36,medium-50,large-58.

$fixViewport: false !default;

@mixin respond-min($width) {
	// If we're outputting for a fixed media query set
	@if $fixViewport {
		// ...and if we should apply these rules
		@if $fixViewport >= $width {
			// ...output the content the user gave us.
			@content;
		}
	}
	@else {
		// Otherwise, output it using a regular media query
		@media (min-width: $width) {
			@content;
		}
	}
}

@mixin respond-max($width) {
	// If we're outputting for a fixed media query set...
	@if $fixViewport {
		// ...and if we should apply these rules...
		@if $fixViewport < $width {
			// ...output the content the user gave us.
			@content;
		}
	}
	@else {
		// Otherwise, output it using a regular media query
		@media (max-width: $width) {
			@content;
		}
	}
}

@mixin respond-min-max($minwidth,$maxwidth) {
	// If we're outputting for a fixed media query set...
	@if $fixViewport {
		// ...and if we should apply these rules...
		@if $fixViewport >= $minwidth {
			@if  $fixViewport <= $maxwidth {
				// ...output the content the user gave us.
				@content;
			}
		}
	}
	@else {
		// Otherwise, output it using a regular media query
		@media (min-width: $minwidth) and (max-width: $maxwidth) {
			@content;
		}
	}
}

// specific breakpoint on type
$breakpoints: ( 
				(small, 36em),
				(medium, 50em),
				(large, 58em)
			);
@mixin respond-to($respond-to-breakpoint) {
	@each $breakpoint in $breakpoints {
		@if nth($breakpoint, 1) == $respond-to-breakpoint {
			@include respond-min(nth($breakpoint, 2));
		}
	}
}

// general media query
@mixin media-query($value, $operator: 'min-width', $query: 'screen') {
	@media #{$query} and (#{$operator}: #{$value}) {
		@content;
	}
}

// only for accessibility and validation purpose keep element in posittion to not scroll the page
// http://webaim.org/techniques/css/invisiblecontent/#absolutepositioning top -10000px jumps the focus and scroll off the page
@mixin visuallyhidden(){
	border: 0;  
	clip: rect(0,0,0,0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
}

// Ex with a 16px container and 14px desired for our targeted aside.
// aside { font-size: pxtoem(14, 16); }
// Ex with a 16px container and 1.5em desired for our targeted aside.
// aside { margin-bottom: emtopx(1.5, 16); }

// Convert px to em
@function pxtoem($target, $context){
	@return ($target/$context)+0em;
}
// Convert em to px
@function emtopx($target, $context){
	@return ($target*$context)+0px;
}


// Styles for Old IE and modern browsers:
$oldIE: false !default;

// Only use this content if we're dealing with old IE
@mixin oldIE {
	@if $oldIE {
		@content;
	}
}
// Only use this content if we're NOT dealing with old IE
@mixin modern{
	@if $oldIE == false{
		@content;
	}
}

// Allows a parent element to enclose the full height of the children
// elements when all of the children are floated.
// Normally the parent will have no height. 
// @see http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clear-floats {
	// &:before{
	//     content:"";
	//     display:table;
	// }
	&:after {
		content:" ";
		visibility: hidden;
		width:0;
		height:0;
		display:block;
		clear:left; // both ?
	}
	@if $oldIE {
		&	{
			*zoom: 1
		} 
	}  
}
